#ifdef CUDA_IMPL

#define CONST_TABLE static __device__ const
#define RUNGE_KUTTA void __global__ Cuda_RungeKutta_Kernel()
#define PREPARE                          \
mass_state *x0=dkf.x0,*f=dkf.f;          \
mass *x=dkf.dmlist;                      \
fast_real dt=dkf.dt;                     \
                                         \
int mn=dkf.nmass;                        \
int i0=blockIdx.x*dkf.mass_per_block;
#define CONFIG dkf.
#define FORALL_MASS                                     \
for(int di=0;di<dkf.mass_per_block;di+=blockDim.x){     \
    int i=i0+di+threadIdx.x;                            \
    if(i<mn&&di+threadIdx.x<dkf.mass_per_block)
#define FORALL_MASS_END }
#define ACCEL Cuda_accel

#else

#define CONST_TABLE static const
#define RUNGE_KUTTA void msystem::RungeKutta12(fast_real dt,int_t n_step)
#define PREPARE                                   \
std::vector<mass> &x=mlist;                       \
int_t mn=x.size();                                \
static thread_local std::vector<mass_state> x0,f; \
x0.resize(mn);                                    \
f.resize(25*mn);
#define CONFIG
#define FORALL_MASS for(int_t i=0;i<mn;++i)
#define FORALL_MASS_END 
#define ACCEL accel

#endif

//dfloat_t<double> representation of RungeKutta12 coefficients table, little endian
CONST_TABLE uint64_t rk12_coefs[]={
    0x3fc999999999999a, 0xbc6999999999999a, 0xbfcba781948b0fcd, 0xbc6ba781948b0fcd, 0x3fe8b0fcd6e9e065, 0x3c7161f9add3c0ca, 0x3fcaaaaaaaaaaaab, 0xbc65555555555555, 0x0000000000000000, 0x0000000000000000,
    0x3fe4000000000000, 0x0000000000000000, 0x3fc8bf258bf258bf, 0x3c52c5f92c5f92c6, 0x0000000000000000, 0x0000000000000000, 0x3fcc28f5c28f5c29, 0xbc347ae147ae147b, 0xbfb47ae147ae147b, 0x3c3eb851eb851eb8,
    0x3fb999999999999a, 0xbc5999999999999a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3fd999999999999a, 0xbc7999999999999a, 0x3fe0000000000000, 0x0000000000000000,
    0x3fba7618114e1bf6, 0x3c43b3f2a62ea3c8, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3fbfc1f18ff82c19, 0xbc4b61860295c0fb, 0x3fdeec46c2c2dd8d, 0xbbe13836cc14bc2f,
    0xbfa3d76fba4b41a8, 0xbc31f68ffc29bcba, 0x3fbfc0f8b44d6b8c, 0xbc5aa7e69d5bb7e1, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x3fcbc850ab6ee4c3, 0x3c67206ff1d04e75, 0x3f8c26a4694a2604, 0xbc2da7f1cb661e56, 0xbfb0ec8de4b8687a, 0xbc2f38a9cd03c98f, 0x3fb76b1199a94565, 0xbc5b0ff590ca16c9, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xbf764be8711e68c3, 0x3c07a1b665764401, 0x3fb16d25481be4f8, 0x3c42270c3f96f42d,
    0x3fda2321e9532f0c, 0xbc61604f21168ab7, 0x3fb6c8cb210c9825, 0xbc58b548933eaece, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x3f7475eedf7fdaa4, 0x3c17ea1c24bf4357, 0x3fd9777e0f8da328, 0xbc77705b215fc677, 0x3fdb63356509c5e7, 0x3c78a467b56d48ef, 0xbfb625a28c0ce4b6, 0x3c57bbc9d612060b,
    0x3fb1cb538559f3d5, 0xbc4afc5eb0f2a29e, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x3fc087e311eb7a4e, 0x3c6f1ae0d98fbe87, 0x3ff87de56e74aaa9, 0x3c71d54678682dc7, 0x3fe27df336077893, 0x3c5ba08b16c9ddf7, 0xbfee7101bbff31ea, 0xbc851c444dc86634, 0xbfda21345b508404, 0xbc77fc6e7c04706c,
    0x3fa6c6e32bae599f, 0x3c4cec07b63e5bef, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0xbf6f2b2da0494088, 0xbbf965f16998d9f0, 0x3f85e78691b81428, 0xbc2c14ca9de4e38b, 0x3f9576f6cdef5a4c, 0x3c396ee780fefca6, 0xbf97dfc87a0957dd, 0xbc38be1fecfdb08e, 0x3f65911679390f89, 0x3be4b854502e8da9,
    0x3f69d7f1882bd15f, 0x3c0917f1f468a9cc, 0x3f93ed076ed7baed, 0x3c3b466b62617235, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3f11c96c5ee267e1, 0x3b89736b177992b0,
    0xbf06889f53acfc0b, 0xbb96ab08a8f894c9, 0x3ef27e19b2a71605, 0x3b4fa8ed40fa62b8, 0x3fb0bd2e2a11bffe, 0x3c214b9bb047fbe6, 0x3fca79a12264a217, 0x3c511943b575367c, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x3f91147575535495, 0x3c36c6b2062405bc, 0xbf82031f040ee870, 0x3c23bb8ca4d50a2d, 0x3f6c664fadcb61ca, 0x3bf6ebd400d38c34, 0xbfeb8f7a7c2b8e93, 0xbc6b503a38cdd657,
    0x3fed13ad1c9e9ee1, 0x3c8c29c8f4e5306b, 0x3f94e1ccc9c1c676, 0xbc263645a03d59de, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3fb64227945bc47e, 0xbc54accf93fb048c,
    0xbf939ffae5f5f91a, 0xbc32b86286b2fd8c, 0x3f7adac51fbb90ef, 0x3c12465c271ef04c, 0x3fb947860796bbd9, 0xbc529ad85c8348bb, 0x3f75edb4a964e0ea, 0xbc1481e5f6612bf7, 0x3fd3465593a2214d, 0x3c72b81078c9b6e8,
    0x3fcd3c8d97defab6, 0xbbd68e1ddc186197, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xbfdfead2722b7824, 0xbc7ec08e0ed14960, 0x3fc14279b41403d9, 0xbc64067e66a37a76,
    0xbfa3d67e215b6985, 0x3c4ead2013d24766, 0xbff4654dfbfa1b1e, 0xbc5ddb90daf2f810, 0x3ff706d075345d25, 0xbc6f27d9727c2606, 0xbfcb6498c202da42, 0xbc521e99f147017d, 0x3feea9981de68251, 0xbc80c65a706f152c,
    0x4000048e6c74851e, 0x3cab22d8f60dc5e7, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x40008940c910b355, 0x3ca71d3fab71a50b, 0x3fe3f7a0fefd1695, 0x3c879ee87607f787,
    0xbfa7ab3ea623bf47, 0x3c3ac4671733dd05, 0xc021b310304305ed, 0xbcb18bb42acd3a27, 0x401ef866202bd05f, 0x3cb4c88fb6225c81, 0xbfe2d3d53ed02ccf, 0x3c7fbe36b0895d7a, 0xbff1b59b105e7f58, 0xbc92834ab90f9b6a,
    0xbfedbeb3ae22b89e, 0x3c77e4bf516adbe3, 0x40091a68de728e6f, 0xbc9867abcf6f6c1f, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x3fc087e311eb7a4e, 0x3c6f1ae0d98fbe87, 0x3ff87de56e74aaa9, 0x3c71d54678682dc7, 0x3fe27df336077893, 0x3c5ba08b16c9ddf7, 0x4015aefbdb36b046, 0xbca22256194b4ee4,
    0x3fcda35465678ac8, 0x3c6cd8c79c739b3d, 0x3fb3701a4268c9e4, 0x3c5c4b18977cf63b, 0xc028bef981d09201, 0xbcb109deae5e0fa6, 0x4023b588bc4ea3b3, 0xbcb834cb17e73bdc, 0x3fb5fe45ce22b532, 0x3c4f31d6c91764e8,
    0xc0169c15f649d7b7, 0xbcb3e509d1e1b1ef, 0xbfff1690f9880515, 0x3c9115250eefe997, 0xbfc06ddba9a65c9f, 0xbc6cc3c4d84e6148, 0x3ff6233a5309732b, 0x3c84a3c4b87303a5, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3f7475eedf7fdaa4, 0x3c17ea1c24bf4357, 0x3fd9777e0f8da328, 0xbc77705b215fc677,
    0x3fdb63356509c5e7, 0x3c78a467b56d48ef, 0xbff4d90d2b2dc73d, 0xbc7b53be46be329d, 0x3fe5294e6cbf6ef1, 0x3c76b13e35a2ce7a, 0xbfc280ef477b95d5, 0x3c4c270849922604, 0xc01bdcf047ce0470, 0xbca5ff451fec2c5f,
    0x401aa1e125c7d6e7, 0x3c8081300abedbb8, 0xbffab8366561a6a7, 0x3c9847a840a79859, 0x4000835a45882de5, 0xbcafcd0c6bd2adad, 0xbfe59780a697623d, 0x3bfe2cbf3c87699a, 0xbf52f167c91e0c05, 0x3be5b726ff616d42,
    0xbf7648dc53fbd16b, 0xbbef8e4a53255932, 0x3fee70871a52e5ae, 0xbc8a9469006dae18, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x3fcbc850ab6ee4c3, 0x3c67206ff1d04e75, 0x3f8c26a4694a2604, 0xbc2da7f1cb661e56, 0xbfb0ec8de4b8687a, 0xbc2f38a9cd03c98f, 0x0000000000000000, 0x0000000000000000, 0x3fc37df775a192b8, 0xbc53804d57fe8ab0,
    0xbfd59d8c811745aa, 0x3c406796ef287043, 0xbf93bed141f98f56, 0xbc3c856d762a1e8b, 0xc00d75f328efc03e, 0x3c9d038a7e6adec1, 0x40094bbb7da506d8, 0x3c6d780a4c3cab69, 0xbfd7b5a87035ef9b, 0x3c526fd008a88144,
    0xbfaa5ddeadc54a35, 0xbc49b7f837d3018b, 0xbf4b2f6743a20af6, 0xbbe4393f188c3d11, 0x3ec778ae7e15e631, 0x3b03144e804a05e6, 0x3fa56eb9aa3197b3, 0x3c4691f3e644fd75, 0x3fd1dc84351c67df, 0xbc63c62ceab9c548,
    0x3fba7618114e1bf6, 0x3c43b3f2a62ea3c8, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3fbfc1f18ff82c19, 0xbc4b61860295c0fb, 0x3fdeec46c2c2dd8d, 0xbbe13836cc14bc2f,
    0xbfa3d76fba4b41a8, 0xbc31f68ffc29bcba, 0x0000000000000000, 0x0000000000000000, 0xbfdc0d5568f57e66, 0x3c670f15ffa5fb41, 0x0000000000000000, 0x0000000000000000, 0xbfcbfc4903c56495, 0x3c6bdd61712b7029,
    0xbf9ffbab1f6444bb, 0x3c2b016dabb43b0e, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3f9ffbab1f6444bb, 0xbc2b016dabb43b0e, 0x3fcbfc4903c56495, 0xbc6bdd61712b7029, 0x3fdc0d5568f57e66, 0xbc670f15ffa5fb41,
    0x3fc8bf258bf258bf, 0x3c52c5f92c5f92c6, 0x0000000000000000, 0x0000000000000000, 0x3fcc28f5c28f5c29, 0xbc347ae147ae147b, 0xbfb47ae147ae147b, 0x3c3eb851eb851eb8, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x3fb9326bc5236189, 0xbc4a311e0d6ff3bd, 0xbfc923fdf4e54946, 0x3c66976c91121f90, 0x0000000000000000, 0x0000000000000000, 0x3fdbeeed3e630b69, 0xbc73a9cc0df1751a,
    0x3fb0b4f82326dcd0, 0x3c4a2f778877b29c, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xbfb0b4f82326dcd0, 0xbc4a2f778877b29c, 0xbfdbeeed3e630b69, 0x3c73a9cc0df1751a, 0x3fc923fdf4e54946, 0xbc66976c91121f90,
    0xbfb9326bc5236189, 0x3c4a311e0d6ff3bd, 0xbfcba781948b0fcd, 0xbc6ba781948b0fcd, 0x3fe8b0fcd6e9e065, 0x3c7161f9add3c0ca, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0xbfe5555555555555, 0xbc85555555555555, 0x0000000000000000, 0x0000000000000000, 0xbfd9012bc3927d44, 0x3c4d709ffb2060a7, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x3fd9012bc3927d44, 0xbc4d709ffb2060a7, 0x3fe5555555555555, 0x3c85555555555555, 0x3fc999999999999a, 0xbc6999999999999a, 0x0000000000000000, 0x0000000000000000,
    0xbfc511e8d2b3183b, 0x3c00db20a88f4696, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x3fc511e8d2b3183b, 0xbc00db20a88f4696, 0x3ff78c70c9450420, 0xbc84da89e18bf0c2, 0x3fe9333333333333, 0x3c7999999999999a, 0x3fdaf684bda12f68, 0x3c72f684bda12f68, 0x0000000000000000, 0x0000000000000000,
    0x3fd2aaaaaaaaaaab, 0xbc75555555555555, 0x0000000000000000, 0x0000000000000000, 0x3fd64f796264da02, 0x3c51608de9669c95, 0x3fcd603db79d677d, 0x3c66925478f5099d, 0x4017296f9ea55a9d, 0xbcb845e20dde40b8,
    0x3fdaca23467c036e, 0xbc76ca3604b5e19d, 0x3fd3a68a9907e3df, 0xbc7b709a0c2fdacf, 0xc012bf7f4d237512, 0xbcaa2e30fb70970b, 0x400915f29d3635d8, 0x3c9f75a3cc92d0d3, 0x3ff66bec312642a3, 0x3c94730910768669,
    0xc0161e03b4e0f4ce, 0xbcb45bced20e9a81, 0xbfeb4ce88e8f2d49, 0xbc6e485668404f26, 0x3fba83f13d5cc1ef, 0x3c586630818d9e63, 0xbfc1fb10d15d1eb1, 0x3c64345e92631693, 0xbfdaca23467c036e, 0x3c76ca3604b5e19d,
    0xbfcd603db79d677d, 0xbc66925478f5099d, 0xbfd64f796264da02, 0xbc51608de9669c95, 0xbfd2aaaaaaaaaaab, 0x3c75555555555555, 0xbfdaf684bda12f68, 0xbc72f684bda12f68, 0xbfe9333333333333, 0xbc7999999999999a,
    0x3f98618618618618, 0x3c38618618618618, 0x3f98000000000000, 0x0000000000000000, 0x3fa0000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3fa5555555555555, 0x3c45555555555555,
    0x0000000000000000, 0x0000000000000000, 0x3fa999999999999a, 0xbc4999999999999a, 0x3fa999999999999a, 0xbc4999999999999a, 0x0000000000000000, 0x0000000000000000, 0x3fb999999999999a, 0xbc5999999999999a,
    0x3fb2492492492492, 0x3c52492492492492, 0x0000000000000000, 0x0000000000000000, 0x3fc1b784990653ef, 0xbc61b4758859299e, 0x3fcba1b7611fb4d8, 0x3c5cd3b4f0838382, 0x3fcf3526859b8cec, 0x3c0f3526859b8cec,
    0x3fcba1b7611fb4d8, 0x3c5cd3b4f0838382, 0x3fc1b784990653ef, 0xbc61b4758859299e, 0xbfb2492492492492, 0xbc52492492492492, 0xbfb999999999999a, 0x3c5999999999999a, 0xbfa999999999999a, 0x3c4999999999999a,
    0xbfa999999999999a, 0x3c4999999999999a, 0xbfa5555555555555, 0xbc45555555555555, 0xbfa0000000000000, 0x0000000000000000, 0xbf98000000000000, 0x0000000000000000, 0x3f98618618618618, 0x3c38618618618618
};


RUNGE_KUTTA{
    const real *clist=(const real *)rk12_coefs;

    PREPARE;
    
    for(int_t i_step=0;i_step<CONFIG n_step;++i_step){
        FORALL_MASS{
            x0[i]=x[i];
        }FORALL_MASS_END

        fast_real dt_k;
        for(int_t k=1;k<=25;++k){
            dt_k=0;
            FORALL_MASS{
                mass_state &fi=f[mn*(k-1)+i];
                mass &xi=x[i];
                fi.v=xi.v;
                fi.naccel=xi.gaccel+xi.daccel+xi.naccel;
                fi.w=xi.w;
                fi.dtorque=xi.dtorque;

                if(k==25){
                    fast_mpvec j(xi.GL),&w=xi.w;
                    fast_mpvec wxj=w*j;
                    fast_real wxj2=wxj%wxj;
                    if(wxj2!=0){
                        fast_mpmat ir=xi.GI.inverse();
                        fast_real dt2=dt*dt;
                        fast_real e=w%j*(fast_real(1)/2);
                        fast_real de=(ir%w)%((ir%wxj)*j+w*wxj);
                        de*=e*dt2*dt2/(36*wxj2);
                        xi.Erot=de;
                        xi.Egrad=wxj;
                    }
                    else{
                        xi.Erot=0;
                        xi.Egrad=0;
                    }
                }

                xi.v=0;
                xi.naccel=0;
                xi.w=0;
                xi.dtorque=0;
            }FORALL_MASS_END

            for(int_t j=0;j<k;++j){
                const real &ckj=clist[k*(k-1)/2+j];
                const fast_real fckj=(fast_real)ckj;
                if(ckj.hi){
                    dt_k+=fckj;
                    FORALL_MASS{
                        mass_state &fi=f[mn*j+i];
                        mass &xi=x[i];
                        xi.v+=ckj*fi.v;
                        xi.naccel+=fckj*fi.naccel;
                        xi.w+=fckj*fi.w;
                        xi.dtorque+=fckj*fi.dtorque;
                    }FORALL_MASS_END
                }
            }

            fast_real t=fast_real(CONFIG t_eph)+dt*(dt_k+i_step);
            FORALL_MASS{
                const mass_state &xi0=x0[i];
                mass &xi=x[i];

                xi.r=xi0.r+real(dt)*xi.v;
                xi.v=xi0.v+mpvec(dt*xi.naccel);
                xi.w/=dt_k;
                xi.s=xi0.s;
                fast_mpvec dw=(fast_real(2)/3)*(xi.w-xi0.w);
                xi.s+=(xi.w-dw).rotation_matrix(dt*dt_k/2)%fast_mpmat(xi.s);
                xi.s+=(xi.w+dw).rotation_matrix(dt*dt_k/2)%fast_mpmat(xi.s);
                xi.GL=xi0.GL+mpvec(dt*xi.dtorque);
            
                if(k==25){
                    xi.s+=xi.Egrad.rotation_matrix(xi.Erot)%fast_mpmat(xi.s);
                    xi.orthogonalize();
                }
                //update
                xi.GM=xi.GM0+xi.dGM*t;

                xi.exJ2=xi.dJ2*t;
            }FORALL_MASS_END
            
            ACCEL();
        }
#ifndef CUDA_IMPL
        record_substeps(dt);
#endif
    }
}