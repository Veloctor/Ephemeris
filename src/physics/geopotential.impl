#ifdef CUDA_IMPL

#define CONST_TABLE static __device__ const
#define STATIC_FUNCTION static __device__
#define FUNCTION __device__
#define SUM_FUNCTION cuda_sum

#else

#define CONST_TABLE static const
#define STATIC_FUNCTION static
#define FUNCTION
#define SUM_FUNCTION sum

#endif

#define do_swap(v1,v2) do{fast_real _v;_v=v1;v1=v2;v2=_v;}while(0)

FUNCTION fast_mpvec geopotential::SUM_FUNCTION(fast_real R,fast_mpvec r) const{
    fast_real rho2=r.x*r.x+r.y*r.y;
    fast_real rr2=1/(rho2+r.z*r.z);
    fast_real rho1=sqrt(rho2);
    fast_real rr1=sqrt(rr2);
    fast_real rb1=R*rr1;
    fast_real rbn=rb1;
    fast_real cphi=rho1*rr1;
    fast_real sphi=r.z*rr1;
    fast_real cm,sm;
    if(rho2<DBL_MIN){
        cm=1;
        sm=0;
    }
    else{
        cm=r.x/rho1;
        sm=r.y/rho1;
    }

    fast_real zx=0,zz=0;// zonal
    fast_real ppn=1,pn=1,pn1=sphi;
    const fast_real *JCSn=c_table+Nt*(Nt+1)-2;
    for(int_t n=2;n<=Nz;++n){
        rbn*=rb1;
        pn=((2*n-1)*sphi*pn1-(n-1)*pn)/n;
        ppn=sphi*ppn+n*pn1;
        fast_real z1=JCSn[0]*rbn;
        zx+=(n+1)*z1*pn;
        zz-=z1*ppn;
        JCSn+=1;
        do_swap(pn,pn1);
    }

    fast_mpvec t(0);// tesseral
    if(Nt>1){
        fast_real smm=sm,cmm=cm,smm1=0,cmm1=1;
        fast_real pnm=0,pn1m=1,pmm=pn1m;
        fast_real rbm=rb1;

        for(int_t m=1;m<=Nt;++m){
            rbn=rbm;
            if(m>1)
            {
                smm=2*cm*smm1-smm;
                cmm=2*cm*cmm1-cmm;
                rbm*=rb1;
                pn1m=0;
                pnm=pmm=(2*m-1)*cphi*pmm;
            }
            JCSn=c_table+(Nt-m+1)*(Nt-m);
            for(int_t n=m+(m==1);n<=Nt;++n){
                rbn*=rb1;
                if(n>m)
                    pnm=((2*n-1)*sphi*pn1m-(n+m-1)*pnm)/(n-m);
                fast_real t1=JCSn[1]*smm+JCSn[0]*cmm;
                fast_real t2=JCSn[1]*cmm-JCSn[0]*smm;
                fast_real ppnm=(n+m)*pn1m-n*sphi*pnm;
                t1*=rbn;
                t2*=rbn;
                t.x+=t1*pnm*(n+1);
                t.y+=m*t2*pnm;
                t.z+=t1*ppnm;
                JCSn+=2;
                do_swap(pnm,pn1m);
            }
            do_swap(cmm,cmm1);
            do_swap(smm,smm1);
        }
    }

    t.x=zx-cphi*t.x;
    t.z+=zz*cphi;
    t*=rr2;
    fast_real g1=t.x*cphi-t.z*sphi;
    fast_mpvec g(g1*cm-t.y*sm,g1*sm+t.y*cm,cphi*t.z+sphi*t.x);
    return g;
}
